这次居然有11道题
/**************************************************************************************************************************************/
A meeting
链接：https://ac.nowcoder.com/acm/contest/884/A
来源：牛客网

题意：在n个地方分散着k个网友，每个网友分别在不同的k个地方，他们要搞线下见面会。请问他们选在哪里，可以使网友到齐的时间最短
这是一个n个节点有n-1条边的图，这样的话我们就可以将它转换为一个树
这道题是求树的直径：
树的直径的定义即为图中两个点之间的最远距离，很好理解为这道题求的是这个图的半径，即最长的距离/2并且向上取整
做法为用两遍搜索
第一遍搜索，以任意一个点为根节点，遍历与这个点距离最远的点，这样的话最后找到的这个点一定在树的直径上
第二遍搜索，以刚才搜索到的一定在树的直径上的点为根节点，搜索到离这个点最远的点

hint：https://blog.csdn.net/weixin_43751631/article/details/97637407

如何找到最远的距离代码（寻找树的直径的模板），一般的模板中的树的直径还有一个条件就是每一条边都有一个value，本题中默认value为1
#include"iostream"
#include"cstdio"
using namespace std;
const int maxn = 1e5;
struct Edge{
	int Next,to,Value;
}e[maxn*2+5];
int N,M,cnt=0,des,ans=0,head[maxn+5];//des是离1点最远的点。

void add_E(int a,int b,int c){//构造每一条边的关系 
	e[++cnt].to = b;
	e[cnt].Next = head[a];
	head[a] = cnt;
	e[cnt].Value = c;
}

void dfs(int x,int fa,int dis){
	if(dis>ans){
		ans = dis,des = x;
	}
	for(int i = head[x];i;i = e[i].Next){
		int pp = e[i].to;
		if(pp == fa)continue;
		dis += e[i].Value;
		dfs(pp,x,dis);
	}
	
	
}
int x,y,v;
int main(){
	scanf("%d%d",&N,&M);
	for(int i = 1;i <= M;i++){
		scanf("%d%d%d",&x,&y,&v);
		add_E(x,y,v);
		add_E(y,x,v);
	}
	dfs(1,0,0);//第一遍dfs以结点1为根节点，搜索到des 
	dfs(des,0,0);//第二遍以des为根节点搜索到最长的直径 
	cout << ans<<endl;
	return 0;
}

改了改上面的模板就过了，不过还是有小bug，比如一开始觉得把value改成1就可以了，并没有想到还要在遍历的时候判断这个节点是不是有人

#include<iostream>
using namespace std;
const int maxn = 1e5;
struct Edge{
	int Next,to,Value;
}e[maxn*2+5];
int N,M,cnt=0,des,ans=0,head[maxn+5];//des是离1点最远的点。
int in[maxn+5];
void add_E(int a,int b,int c){//构造每一条边的关系 
	e[++cnt].to = b;
	e[cnt].Next = head[a];
	head[a] = cnt;
	e[cnt].Value = c;
}

void dfs(int x,int fa,int dis){
	if(dis>ans&&in[x]){//限定树的节点，即保证这个节点是有人的
		ans = dis,des = x;
	}
	for(int i = head[x];i;i = e[i].Next){
		int pp = e[i].to;
		if(pp == fa)continue;//防止成环 
		//dis += e[i].Value;
		dfs(pp,x,dis+1);//这里一开始我想的是value已经都是1了所以dis+=value也可以写为下面的dis+1，但是好像这样做是过不了的
	}
	
	
}
int x,y,v;

int main(){
	scanf("%d%d",&N,&M);
	for(int i = 1;i <= N-1;i++){
		scanf("%d%d",&x,&y);
		add_E(x,y,1);
		add_E(y,x,1);
	}

	for(int i = 1;i <= M;i++)
    	{
    		int a;
    		scanf("%d",&a);
    		in[a] = 1;//将这个节点标识为合法
    	}
	dfs(1,0,0);//第一遍dfs以结点1为根节点，搜索到des 
	dfs(des,0,0);//第二遍以des为根节点搜索到最长的直径 
	
	cout<<(ans+1)/2<<endl;
	return 0;
}




/**************************************************************************************************************************************/
B
/**************************************************************************************************************************************/
C sequence

链接：https://ac.nowcoder.com/acm/contest/884/C
来源：牛客网

题意为给你2个长度为n的区间 a区间和b区间
区间的值为b区间之和乘以a区间的最小值，要你求出值最大的区间

第一个思路，两遍的暴力搜索,第一个循环只判断b数组正数加上负数，sum>0时的情况,
然后对于每一个值的正负号颠倒之后，第二个循环反过来判断sum<0的情况，因为正负颠倒之后用sum<0判断sum<0

这样的思路可以过题，但是有反例，
5
1 2 3 4 5
1 2 3 4 5

这个样例应该是输出最大值是36，但是代码输出的是25

#include<iostream>
#include<cmath>
using namespace std;
typedef long long ll;
const int maxn=1e5+10;

ll a[maxn],b[maxn];

int main()
{
	ll n;
	scanf("%d",&n);
	for(int i=0;i<n;i++) scanf("%lld",&a[i]);
	for(int i=0;i<n;i++) scanf("%lld",&b[i]);
	
	ll minn=a[0],ans=a[0]*b[0],sum=b[0];//初始化区间 
	
	for(int i=1;i<n;i++)//第一个循环只判断b数组正数加上负数，sum>0时的情况
	{
		if(sum<0)
		{
			minn=a[i];
			sum=b[i];
		}
		else 
		{
			sum+=b[i];
			minn=min(minn,a[i]);
			ans=max(ans,sum*minn);
		}
		a[i]*=(-1);
		b[i]*=(-1);//将数组中的正元素变成负元素，把负元素变成正元素 
	}
	
	minn=a[0],sum=b[0];
	
	for(int i=1;i<n;i++)//第二个循环反过来判断sum<0的情况，因为正负颠倒之后用sum<0判断sum<0 
	{
		ans=max(ans,a[i]*b[i]);
		if(sum<0)
		{
			minn=a[i];
			sum=b[i];
		}
		else 
		{
			sum+=b[i];
			minn=max(minn,a[i]);//所以这里是max 
			ans=max(ans,sum*minn);
		}
	}
	printf("%lld\n",ans);
	return 0;
 } 

第二个正常的方法，线段树+单调栈

hint：https://blog.csdn.net/anthony1314/article/details/97535853

记录下a数组每个点以他为最小值的区间最左边是哪个点，最右边是哪个点，用单调栈进行操作 r[i]表示右边界 l[i]表示左边界
用线段树维护前缀和，如果a[i]为非负树，那么b区间和越大越好，区间值就为(sum[r[i]]-sum[l[i]-1])*a[i]
如果为负数，尽量找区间和最小， 那么要在i之前找前缀和最大的位置，在i之后找前缀和最小的位置，最小减最大极为最优
如果i之前前缀和为负数，那直接把左端点设在i最优

#include<bits/stdc++.h>
using namespace std;
#define maxn 3000005
#define ll long long
#define inf 0x3f3f3f3f 
int n,l[maxn],r[maxn];
ll a[maxn], pre[maxn], sum[2][maxn<<2];
ll b[maxn];
void pushup(int rt) {
	sum[0][rt] = max(sum[0][rt<<1], sum[0][rt<<1|1]);
	sum[1][rt] = min(sum[1][rt<<1], sum[1][rt<<1|1]);
}
void build(int l, int r, int rt) {
	if(l == r) {
		sum[0][rt] = sum[1][rt] = pre[l];
		return ;
	}
	int mid = (l+r)>>1;
	build(l, mid, rt<<1);
	build(mid+1, r, rt<<1|1);
	pushup(rt);
}
ll qmax(int L, int R, int l, int r, int rt) {
	if(L <= l && R >= r) {
		return sum[0][rt];
	}
	int mid = (l+r)>>1;
	ll ans = -inf;
	if(L <= mid) {
		ans = max(ans,qmax(L, R, l, mid, rt<<1));
	}
	if(R > mid) {
		ans = max(ans, qmax(L, R, mid+1, r, rt<<1|1));
	}
	return ans;
}
ll qmin(int L, int R, int l, int r, int rt) {
	if(L <= l && R >=r ) {
		return sum[1][rt];
	}
	int mid = (l+r)>>1;
	ll ans = inf;
	if(L <= mid) {
		ans = min(ans,qmin(L, R, l, mid, rt<<1));
	}
	if(R > mid) {
		ans = min(ans, qmin(L, R, mid+1, r, rt<<1|1));
	}
	return ans;
}
int main() {
	cin>>n;
	for(int i = 1; i <= n; i++) {
		scanf("%lld", &b[i]);
	}
	for(int i = 1; i <= n; i++) {
		scanf("%lld", &a[i]);
		pre[i] = pre[i-1] + a[i];//计算前缀和 
	}
	build(1, n, 1);
	stack<int>s;
	for(int i = 1; i <= n; i++) {
		while(s.size() && b[s.top()] >= b[i]) {
			s.pop();
		}
		if(s.empty()) {
			l[i] = 1;
		} else {
			l[i] = s.top() + 1;
		}
		s.push(i);
	}
	while(!s.empty()) {
		s.pop();
	}
	for(int i = n; i >= 1; i--) {
		while(s.size() && b[s.top()] >= b[i]) {
			s.pop();
		}
		if(s.empty()) {
			r[i]=n;
		} else {
			r[i] = s.top() - 1;
		}
		s.push(i);
	}
	ll ans = -inf;
	for(int i = 1; i <= n; i++) {
		if(b[i] >= 0) {
			ans = max(ans, (pre[r[i]] - pre[l[i]-1]) * b[i]);
		} else {
			ll maxx, minn;
			maxx = qmax(l[i], i, 1, n, 1);
			if(maxx < 0) {
				maxx = 0; //前面区间 的最大值如果 小于0则不去直接以i为左边界
			}
			minn = qmin(i, r[i], 1, n, 1);
			ans = max(ans, (minn - maxx) * b[i]);
		}
	}
	cout << ans << endl;
	return 0;
}

/**************************************************************************************************************************************/
D triples
链接：https://ac.nowcoder.com/acm/contest/884/D
来源：牛客网

/**************************************************************************************************************************************/
E
F
G
H
I
/**************************************************************************************************************************************/
J free
链接：https://ac.nowcoder.com/acm/contest/884/J
来源：牛客网

/**************************************************************************************************************************************/
K number
链接：https://ac.nowcoder.com/acm/contest/884/K
来源：牛客网

题意：给你一个由数字组成的字符串，求这个字符串中能被300整除的数字个数

这道题的题解方法有两种，
第一种是大家都会想到的一个普通解法，即首先找到两个连续的2个以上的0
然后对这个数组求前缀和并对前缀和中的每一个数字对3取模
然后找到相等的前缀和，相等的前缀和这个区间可以被3整除
即遇到0的时候向前找有多少个前缀和相等的区间，然后答案为0的个数*前面区间的个数
题解很简单but中间会有各种各样的奇怪的bug出现

代码来源于张怡，我觉得写的有一点点复杂

#include <cstdio>
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <cstring>
#include <queue>
#include <stack>
#include <cmath>
#define int long long
#define Mod 1000000007
#define pi (acos(-1))
#define inf 0x3f3f3f3f
#define M 100005
using namespace std;
 
int aa[M];
int a[M];
int m[M];
int ans2[M];
int ans1[M];
int ans0[M];
 
signed main(){
    char s[M];
    gets(s);
    int n=strlen(s);
    int sum=0;
    a[0]=0;
    a[0]=0;
    int k=0;
    for(int i = 0 ; s[i] != '\0' ; i ++ )
    {
        a[i+1]=a[i]+s[i]-'0';
        aa[i+1]=s[i]-'0';
        m[i+1]=a[i+1]%3;
        if(s[i]=='0')
        {
            k++;
            sum+=k;
        }
        else
        {
            k=0;
        }
    }
    aa[n+1]=1;
    aa[n+2]=1;
    for(int i = 1 ; i <= n ; i ++ )
    {
        if(m[i]==0)
        {
            ans0[i]=ans0[i-1]+1;
            ans1[i]=ans1[i-1];
            ans2[i]=ans2[i-1];
        }
        else if(m[i]==1)
        {
            ans0[i]=ans0[i-1];
            ans1[i]=ans1[i-1]+1;
            ans2[i]=ans2[i-1];
        }
        else if(m[i]==2)
        {
            ans0[i]=ans0[i-1];
            ans1[i]=ans1[i-1];
            ans2[i]=ans2[i-1]+1;
        }
    }
     
//  for(int i = 1 ; i <= n ; i ++ )
//  printf("%lld %lld %lld\n",ans0[i],ans1[i],ans2[i]);
// 
//  printf("%lld\n",sum);
    int last=0;
    int cnt=0;
    int lp=0;
    for(int i = 1 ; i <= n+2 ; i ++ )
    {
         
        if(aa[i]!=0&&aa[i-1]==0&&aa[i-2]==0&&(i-2)>0&&lp>0)
        {
//      cout<<lp<<endl;
//          printf("111\n");
            if(last==1)
            sum+=(ans1[lp-1])*(cnt-1);
            else if(last==2)
            sum+=ans2[lp-1]*(cnt-1);
            else sum+=(ans0[lp-1]+1)*(cnt-1);
        }
        if(aa[i]==0&&aa[i-1]==0&&aa[i-2]!=0&&(i-2)>0)
        {
            last=m[i-2];
            lp=i-2;
//          cout<< lp <<endl;
        }
        if(aa[i]==0)
        cnt++;
        else
        cnt=0;
//      printf("%lld %lld %lld\n",ans0[i],ans1[i],ans2[i]);
//      cout<<sum<<endl;
    }
    printf("%lld",sum);
    return 0;
}



第二种思路来自于阮节；
设一个数组只有三个数字，b[0]b[1]b[2]，来统计联系单两个0之后前缀和中的0,1,2的个数
注意的是一个转移的思想
扫到0，则之前的1,和2不变，b[0]++
扫到1,之前的b[2]-=1,b[0]++,因为1+2=3%3=0，这样的话就是b[2]的数字被1抵消
扫到2，同理可得b[1]-=1,b[0]++
每次扫到的00合法位置之前的合法序列为b[0]的个数

代码：
#include <iostream>
#include <cstdio>
#define ll long long
 
using namespace std;
 
string a;
ll b[4];
int main(){
    cin >> a;
    ll co = 0;
    int flag = 0;
    for(int i = 0; i < a.size(); i++){
        if(a[i] - '0' == 0){
            flag++;
            co++;
        }
        else flag = 0;
        if(flag >= 2) co = co + b[0];
         
        if((a[i] - '0') % 3 == 1){
            ll t = b[2];
            b[2] = b[1];
            b[1] = b[0] + 1;
            b[0] = t;
        }
        else if((a[i] - '0') % 3 == 2){
            ll t = b[1];
            b[1] = b[2];
            b[2] = b[0] + 1;
            b[0] = t;
        }
        else b[0]++;
    }
    cout << co << endl;
    return 0;
}

婷艳的代码，是件不容易超但是内存占用很爆炸的样子，用一个dp数组直接对于300思考能不能整除
#include<iostream>
#include<string>
using namespace std;
typedef long long ll;
int dp[100010][300];
int main(){
    string s;
    cin >> s;
    int now=0;
    ll ans=0;
    for(int i=0;i<s.size();i++){
        dp[i][s[i]-'0']++;
        for(int j=0;j<300;j++){
            dp[i+1][(j*10+s[i+1]-'0')%300]+=dp[i][j];
        }  
        ans+=dp[i][0];
    }
    printf("%lld",ans);
    return 0;
}
这一个算是上一个的进化版？为什么一个签到题要有这么多的思路和代码emm
#include<iostream>
using namespace std;
typedef long long ll;
int main(){
    string s;
    int dp[3]={1,0,0};//dp存储对于每一个合法位置之前的合法区间的个数
    int now=0;
    ll ans=0;
    cin >> s;
    for(int i=0;i<s.size();i++){//用一次遍历就可以做到 
        now=(now*10+s[i]-'0')%3;//now当前位存储的位置取模后的数字 
        if(i<s.size()-1&&s[i]=='0'&&s[i+1]=='0')//如果找到了两个连续的0，即合法位置 
            ans+=dp[now];//对于每一个合法的位置，将之前的合法区间的个数相加，合法位置的now一定是0 
        if(s[i]=='0')//每一个0也是一种合法答案 
            ans++;
        dp[now]++;//记录每一个120出现的次数 
    }
    printf("%lld",ans);
    return 0;
}
