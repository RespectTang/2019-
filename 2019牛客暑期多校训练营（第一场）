A
B
C
D
E
/***********************************************************************************************************************************/
F  Random Point in Triangle
/*
链接：https://ac.nowcoder.com/acm/contest/881/F
来源：牛客网
题目描述 
Bobo has a triangle ABC with A(x1,y1),B(x2,y2) and C(x3,y3). Picking a point P uniformly in triangle ABC, 
he wants to know the expectation value 
E=max{SPAB,SPBC,SPCA} where SXYZ denotes the area of triangle XYZ.Print the value of 
36×E. It can be proved that it is always an integer.
输入描述:
The input consists of several test cases and is terminated by end-of-file.
Each test case contains six integers x1,y1,x2,y2,x3,y3.|x1|,|y1|,|x2|,|y2|,|x3|,|y3|≤108
* There are at most 
10
5
105 test cases.
输出描述:
For each test case, print an integer which denotes the result.
示例1
输入
0 0 1 1 2 2
0 0 0 0 1 1
0 0 0 0 0 0
输出
0
0
0
*/
题意很简单，就是告诉你三个点的坐标，在三角形内部任意取一点P，求被P分成的三个子三角形的最大子三角形的面积期望

因为是求求期望，所以无论底边是哪一条都一样，所以讨论以BC为底边
D,E,F分别为三边的中点，所以交点G为重心，所以此时ABG，BCG，ACG这三个小三角形的面积是一样的
BC为底边，如果面积为三个子三角形中的最大面积，所以顶点应该在四边形ADGF中选取，连接DF，则四边形分为在DF上部分和DF下部分

设三角形GDF以DF为底的高为h，因为三角形DFG相似于三角形GBC，所以GBC的高为2h，又因为ABG，BCG，ACG三个三角形面积相等，所以三角形ABC的高为6h
设BC底边长2l
得出最大子面积和总面积的比率Rate=3/4倍顶点在三角形ADF的面积的期望+1/4倍顶点在三角形GDF的面积的期望

分类讨论
(1)在DF上面的部分
平均面积上=1/2*BC*(3h+h')   h'为顶点距离DF的距离
因为在ADF中随意取一点P与DF围成的三角形面积的期望为1/3三角形ADF
即h'=1/3*3h=h
即平均面积上=1/2*2l*4h=4hl
(2)在DF下面的部分
平均面积下=1/2*BC*(3h-h')   h'为顶点距离DF的距离
因为在GDF中随意取一点P与DF围成的三角形面积的期望为1/3三角形GDF
即h'=1/3*h=1/3h
即平均面积上=1/2*2l*(8/3)h=(8/3)hl

三角形ABC的面积为1/2*2l*6h=6hl
代入Rate的式子，得Rate=11/18hl
E=Rate*S

根据三角形面积公式S=1/2[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)] 应该先将点进行逆时针排序
因为可以先选取固定点x1y1，所以将三组坐标按照x进行排序之后，判断最后两个点的y坐标，如果y2>y3则进行交换
E=11/18*1/2[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)]*36
 =11*[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)]

hint:https://www.cnblogs.com/WAautomaton/p/11211864.html

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
typedef long long ll;

struct Node{
	ll x;
	ll y;
};

bool cmp(Node a,Node b)
{
	return a.x<b.x;
	
}


int main()
{
	Node a[3]; 
	while(~scanf("%lld%lld%lld%lld%lld%lld",&a[0].x,&a[0].y,&a[1].x,&a[1].y,&a[2].x,&a[2].y))
	{
		sort(a,a+3,cmp);
		
		if(a[1].y>a[2].y)
		{
			Node temp;
			temp=a[1];
			a[1]=a[2];
			a[2]=temp;
		}
		
		ll s=11*((a[0].x*a[1].y-a[1].x*a[0].y)+(a[1].x*a[2].y-a[2].x*a[1].y)+(a[2].x*a[0].y-a[0].x*a[2].y));
		s=abs(s);
		printf("%lld\n",s);		
	}

}
