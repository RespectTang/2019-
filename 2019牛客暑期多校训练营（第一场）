A Equivalent Prefixes
链接：https://ac.nowcoder.com/acm/contest/881/A
来源：牛客网
题意是讲在两个序列中找到所有区间的RMQ最小值相同，两种思路，一种是判断两个数组的笛卡尔树形结构是否相同，但至于怎么判断不会
在网络上查了一下有讲通过栈来维护笛卡尔树从而判断结构
笛卡尔树的中序遍历之后是原数组，每一个区间的两个节点距离最近的根节点为这个区间的最小值，可以解决区间RMQ问题

第二种思路是单调栈
遍历整个数组，使得单调栈内部数据单调上升，如果判断到当前数字比栈顶元素要小，则栈顶元素出栈，更新栈内元素的顺序
这样可以保证在循环到的这个区间里的最小值一直是栈底元素
单调栈可以模拟整个数组序列的变化趋势，包括进栈几次出栈几次来代表变化曲线的升降规律，同时栈中元素的多少也可以拟合升降幅度
代码为用数组模拟单调栈的写法，用cd两个数组模拟单调栈存数组下标，然后判断while结束后的p值是栈顶元素的值，也就是当前的最大值
#include<iostream>
using namespace std;
int m, a[100100], b[100100];
int c[100100], d[100100];
int main()
{
    while(cin >> m) {
        a[0] = 0;
        b[0] = 0; 
        for (int i = 1; i <= m; i++)
            cin >> a[i];
        for (int i = 1; i <= m; i++)
            cin >> b[i];
        for (int i = 1; i <= m; i++) {
            int p = i - 1;
            while (a[p] > a[i])
                p = c[p];
            c[i] = p;
        }
        for (int i = 1; i <= m; i++) {
            int p = i - 1;
            while (b[p] > b[i])
                p = d[p];
            d[i] = p;
        }
        int sum = 0;
        for (int i = 1; i <= m; i++) {
            if (c[i] == d[i]) sum++;
            else break;
        }
        cout << sum << endl;
    }
}

这个是用单调栈的写法，思路来源于阮节
#include<iostream>
#include<stack>
#include<cstdio>
using namespace std;
int main(){
	int n;
	while(cin>>n){
		stack<int> s1,s2;
		int a[100010],b[100010];
		
		for(int i=0;i<n;i++){
			scanf("%d",&a[i]);
		}
		for(int i=0;i<n;i++){
			scanf("%d",&b[i]);
		}
		
		int k=1;
		s1.push(a[0]);
		s2.push(b[0]);
		while(1){
			if(k==n){
				printf("%d\n",n);
				break;
			} 
			while(1){
				if(!s1.empty()){
					if(a[k]<s1.top()){
						s1.pop();
					}else{
						s1.push(a[k]);
						break;
					}
				}else{
					s1.push(a[k]);
					break;
				}
			}
			while(1){
				if(!s2.empty()){
					if(b[k]<s2.top()){
						s2.pop();
					}else{
						s2.push(b[k]);
						break;
					}
				}else{
					s2.push(b[k]);
					break;
				}
			}
			if(s1.size()==s2.size()){
				k++;
			}else{
				printf("%d\n",k);
				break;
			}
		}
	}
	return 0;
} 


/***********************************************************************************************************************************/
B Integration
/*
链接：https://ac.nowcoder.com/acm/contest/881/B
来源：牛客网
*/

代码和hint来源于郑依鸣，zymtql
hint：https://blog.csdn.net/weixin_43702895/article/details/96478844?tdsourcetag=s_pcqq_aiomsg

先对于积分进行裂项相消化简，求出通项公式
然后将积分用换元法算出来，最后的结果为若干个分式的和，对于所有分式取模再求和在取模
对于分数的取模，用到费马小定理求逆元
每一行代码都注释了作用而且教程写得非常详细


#include <iostream>
using namespace std;
typedef long long ll;//推荐用longlong类型，因为有些数据会爆int
const int maxn=1e3+5;//最大n值
const int mod=1e9+7;//模值
int n;
ll a[maxn];
ll qpow(ll x){//快速幂，用来求逆元
	ll sum=1,pow=mod-2;
	while(pow!=0){
		if(pow%2==1)	sum=(ll)sum*x%mod;
		pow>>=1;
		x=(ll)x*x%mod;
	}
	return (sum+mod)%mod;
}
int main(){
	while(~scanf("%d",&n)){
		int i,j;
		ll ans=0,t;
		for(i=1;i<=n;i++)	scanf("%lld",&a[i]);
		for(i=1;i<=n;i++){
			ll res=1;//res来算每一个分数的分母中连乘的结果
			for(j=1;j<=n;j++){
				if(j==i)	continue;//j不等于i
				res=((a[j]*a[j]-a[i]*a[i])%mod+mod)%mod*res%mod;//连乘取模
			}
			ans=(ans+qpow(res*2*a[i]%mod)%mod)%mod;//res*2*a[i]即为每一个分母，ans储存每一个分数取模后的结果
		}
		printf("%lld\n",(ans+mod)%mod);//加起来，再取一次模
	}
	return 0;
} 

/***********************************************************************************************************************************/
C Euclidean Distance
/*
链接：https://ac.nowcoder.com/acm/contest/881/C
来源：牛客网
示例1
输入
1 1
0
2 3
1 2
3 10
1 -2 3
输出
1
0
16/75
*/
题意是说在一个N维真实空间内存在一个点A，各个分量可以表示为ai/m，然后让你找到一个点P，满足
1.P的各个分量都是实数
2.P的各个分量都大于等于0
3.P的个个分量加起来等于1
使得P和A的欧几里得距离最小，求这个最小距离

拉格朗日乘子法的满足条件Q是一个等式，这样就不满足第二个条件的不等式，所以拉格朗日乘子法并不适用与这道题
一开始想过直接把不等式化成等式但是如果这样的话相当于P点和A点重合并且不满足低三个条件，故不可行

因为题目是要求欧拉距离的最小值，并没有要求求P点坐标
需要求得(a1−p1),(a2−p2),...,(an−pn)这一系列数的最小值
将ai从大到小进行排序，然后将m分别从大到小分配给ai，分配的部分为a[i+1]-a[i]，即两个部分的差值
这样的话就可以让a[1]到a[i]同步递减，这样可以收获更大的效益
同步减小比只减小一个的效益要高

分类讨论两种情况：
1.m刚好被分配完，皆大欢喜
2。m在分配几个ai之后不够分配ai+1，这个时候，a1到a[i]同步减小到一定值均分完m即可
3.不存在m比ai的总和大的情况

代码来源zym
hint：https://blog.csdn.net/weixin_43702895/article/details/96633290

#include <iostream>
#include <algorithm>
#include <functional>
using namespace std;
typedef long long ll;
const int maxn=1e4+5;
int n,m,a[maxn];//题目所给变量
ll getgcd(ll a,ll b){return (b==0?a:getgcd(b,a%b));}
void get(ll &fm,ll &fz,ll m,ll z){//分数加法函数
	ll gcd=getgcd(fz*m*m+z*z*fm,fm*m*m);
	fz=(fz*m*m+z*z*fm)/gcd;
	fm=fm*m*m/gcd;
	return;
}
int main(){
	while(~scanf("%d%d",&n,&m)){
		int i,tot=0;
		for(i=1;i<=n;i++)	scanf("%d",&a[i]);
		sort(a+1,a+n+1,greater<int>());//由大到小排序
		for(i=1;i<n;i++){
			int x=a[i]-a[i+1];//每一个a[i]与a[i+1]之间的差值
			if(tot+x*i<=m)	tot+=x*i;//tot是m已经分配的值，tot+x*i用来判断m还能不能分配值，使a[1],..,a[i]到a[i+1]的位置
			else	break;//不能刚好分配
		}
		int rem=m-tot;//m剩余的值
		//fz/fm等于前面a[1],...,a[i]最小能减少到多少
		ll fz=i*a[i]-rem;
		ll fm=m*i;
		ll gcd=getgcd(fz*fz*i,fm*fm);
		fz=fz*fz*i/gcd;fm=fm*fm/gcd;//约分
		//(fz*fz*i)/(fm*fm)是前面a[1],...,a[i]对距离的贡献
		for(i=i+1;i<=n;i++)	get(fm,fz,m,a[i]);//加上后面没有分配到值的a[i+1],..,a[n]对距离的贡献(a[i]*a[i])/m*m
		//下面是输出限制
		if(fm==1)	printf("%lld\n",fz);
		else	printf("%lld/%lld\n",fz,fm);
	}
	return 0;
} 





/***********************************************************************************************************************************/
D Parity of Tuples
链接：https://ac.nowcoder.com/acm/contest/881/D
来源：牛客网

/***********************************************************************************************************************************/
E ABBA
链接：https://ac.nowcoder.com/acm/contest/881/E
来源：牛客网

题意：有一个2（n+m）的一个序列只有A和B构成，每一个序列可以分成n个AB和m个BA，求有多少种可能性并且模1e9+7
一开始并没有想到A和B可以分开并不相连，所以一直没有理解题意

第一种思路：线性规划

这道题可以模拟成从序列的第一个位置开始填，填A或者是填B，然后填完n+m个A和n+m个B，建立二维坐标系就可以将本题模拟成为走方块的DP
接下来考虑限定条件，横坐标为A的个数，纵坐标为B的个数，如果令在序列中的每一个A的权值为1，B的权值为-1，则前缀和presum=A-B
前缀和有一个上限也有一个下限，下限为-m，上限为n
即-m<=x-y<=n
然后画图进行线性规划，y=x-n和y=x+m和n+m形成的正方形区域中间的部分就是所有的合法路径：从(0,0)点到(n+m,n+m)
分类讨论两块非法路径
(1)下面的部分
由于非法的路径不是很好进行计算，因为有路径走到边界的情况出现，所以将y=x-n向下移一格，变成y=x-n-1
将y=m与y=x-n所围成的部分根据对称轴y=x-n-1对称下来
这样的话这一块的合法路径就可以计算为从点(n+1,-n-1)到点(n+m,n+m)的路径
(2)上面的部分
同理可得，上面的非法路径可以转化为由(-m-1,m+1)到(n+m,n+m)的路径

总路径根据排列组合应该为C(2(n+m),n+m)
非法路径为C(2(n+m),n-1)和C(2(n+m),m-1)，进行相减即可得到最后的结果
为：C(2(n+m),n+m)-C(2(n+m),n-1)-C(2(n+m),m-1)
如果一边取模一别算阶乘的话应该不会爆炸

记录一个大数阶乘取模的算法：https://blog.csdn.net/cax1165/article/details/53054518
事实是这个算法似乎不怎么能用的样子，因为阶乘很容易GG，同时m-1和n-1会出现负数，这样的话整个算法将会无法运行
但是在数字很小的时候完全可以使用
#include<iostream>
#include<cstdio>
#define MOD 1000000007
using namespace std;
typedef long long ll;
ll n,p;
ll a[110]={1,682498929,491101308,76479948,723816384,67347853,27368307,
625544428,199888908,888050723,927880474,281863274,661224977,623534362,
970055531,261384175,195888993,66404266,547665832,109838563,933245637,
724691727,368925948,268838846,136026497,112390913,135498044,217544623,
419363534,500780548,668123525,128487469,30977140,522049725,309058615,
386027524,189239124,148528617,940567523,917084264,429277690,996164327,
358655417,568392357,780072518,462639908,275105629,909210595,99199382,
703397904,733333339,97830135,608823837,256141983,141827977,696628828,
637939935,811575797,848924691,131772368,724464507,272814771,326159309,
456152084,903466878,92255682,769795511,373745190,606241871,825871994,
957939114,435887178,852304035,663307737,375297772,217598709,624148346,
671734977,624500515,748510389,203191898,423951674,629786193,672850561,
814362881,823845496,116667533,256473217,627655552,245795606,586445753,
172114298,193781724,778983779,83868974,315103615,965785236,492741665,
377329025,847549272,698611116};
ll jc(ll n)
{
    ll ans=1;
    if(n>=MOD)
    {
        ans=0;
    }
    if(MOD==1000000007)
    {
        ll now=n/10000000;
        ans=a[now];
        for(ll i=now*10000000+1;i<=n;i++)
        ans=ans*i%MOD;
        return ans%MOD;
    }

    for(int i=1;i<=n;i++)
    ans=ans*i%MOD;
    return ans%MOD;

}

ll C(ll n,ll m)
{
	ll jcn=jc(n);
	ll jcm=jc(m);
	ll jcnm=jc(n-m);
	return jcn/((jcm*jcnm));
}

int main()
{
	ll n,m;
	while(cin>>n>>m)
	{
		if(n==0&&m==0) cout<<"1"<<endl;
		else
		{
			ll res=C(2*(n+m),n+m)-C(2*(n+m),n-1)-C(2*(n+m),m-1);
			//cout<<C(2*(n+m),n+m)<<" "<<C(2*(n+m),n-1)<<" "<<C(2*(n+m),m-1)<<endl;
			cout<<res<<endl;			
		}
	}
	
}

我知道了，并不是这个解法有问题，只是单纯的我写不出来，或许我应该学习一下阶乘取模为什么要这样写而不是打表，
#include<iostream>
#include<cstdio>
using namespace std;
const long long mo=1e9+7;
const int N=4e3+100;
int n,m;
long long jie[N],ni[N],ans;
long long poww(long long a,long long x){
    long long ans=1;
    while(x){
        if(x&1)ans*=a,ans%=mo;
        a*=a,a%=mo;
        x>>=1;
    }
    return ans;
}
void init(){
    jie[0]=1;
    ni[0]=poww(jie[0],mo-2);
    for(int i=1;i<N;++i){
        jie[i]=jie[i-1]*i%mo;
        ni[i]=poww(jie[i],mo-2);
    }
}
inline long long C(int n,int m){
    return jie[n]*ni[n-m]%mo*ni[m]%mo;
}
int main(){
    init();
    while(~scanf("%d%d",&n,&m)){
    	ans=C(n+n+m+m,n+m);
    	if(n)ans-=C(n+n+m+m,n-1);
    	if(m)ans-=C(n+n+m+m,m-1);
        printf("%lld\n",(ans%mo+mo)%mo);
    }
    return 0;
}

接下来是第二种的DP解法，
贪心的思想，我们从前往后扫一遍，遇到A，如果还有’AB’没分到’A’，就把这个’A’分给’AB‘，否则看看’BA’中是否有分到了’B’但还没有分到’A’的，如果有，就把这个’A’分给他，如果没有，那么这个’A’就无法和任何东西配，这个字符串就不满足条件。
有了分配’A’和’B’的原则之后，我们就可以开始dp了。dp[i][j]表示放了i个’A’，j个’B’后依然有可能满足条件的方案数。
dp[i][j]的转移：
考虑放‘A’：
如果当前已经放的‘A’的个数比需要的’AB’个数少，可以直接放
如果当前已经放的’A’的个数大于等于n了，看看放了多少个‘B’，如果放的’B‘的个数小于多出来的’A’，可以直接放。
所以 dp[i+1][j] += dp[i][j] (i < n + j)
'B’同理。
这题的关键是要先想好怎么去分配A和B的归属，然后再去想dp。
hint：https://blog.csdn.net/qq_43202683/article/details/96451069

#include<iostream>
using namespace std;
const int MAXN=2e3;
const int mod =1e9+7;
long long dp[MAXN+5][MAXN+5];
int main()
{
    int n,m;
    while(cin>>n>>m)
    {
        for(int i=0;i<=n+m;i++)
          for(int j=0;j<=n+m;j++)
            dp[i][j]=0;
        dp[0][0]=1;
        for(int i=0;i<=n+m;i++)
          for(int j=0;j<=n+m;j++)
          {
            if(j>=i+1-n) dp[i+1][j]=(dp[i+1][j]+dp[i][j])%mod;
            if(i>=j+1-m) dp[i][j+1]=(dp[i][j+1]+dp[i][j])%mod;
          }
        cout<<dp[n+m][n+m]<<endl;
    }
}


/***********************************************************************************************************************************/
F  Random Point in Triangle
/*
链接：https://ac.nowcoder.com/acm/contest/881/F
来源：牛客网
*/
题意很简单，就是告诉你三个点的坐标，在三角形内部任意取一点P，求被P分成的三个子三角形的最大子三角形的面积期望

https://github.com/RespectTang/2019-/blob/master/trangle.png


因为是求求期望，所以无论底边是哪一条都一样，所以讨论以BC为底边
D,E,F分别为三边的中点，所以交点G为重心，所以此时ABG，BCG，ACG这三个小三角形的面积是一样的
BC为底边，如果面积为三个子三角形中的最大面积，所以顶点应该在四边形ADGF中选取，连接DF，则四边形分为在DF上部分和DF下部分

设三角形GDF以DF为底的高为h，因为三角形DFG相似于三角形GBC，所以GBC的高为2h，又因为ABG，BCG，ACG三个三角形面积相等，所以三角形ABC的高为6h
设BC底边长2l
得出最大子面积和总面积的比率Rate=3/4倍顶点在三角形ADF的面积的期望+1/4倍顶点在三角形GDF的面积的期望

分类讨论
(1)在DF上面的部分
平均面积上=1/2*BC*(3h+h')   h'为顶点距离DF的距离
因为在ADF中随意取一点P与DF围成的三角形面积的期望为1/3三角形ADF
即h'=1/3*3h=h
即平均面积上=1/2*2l*4h=4hl
(2)在DF下面的部分
平均面积下=1/2*BC*(3h-h')   h'为顶点距离DF的距离
因为在GDF中随意取一点P与DF围成的三角形面积的期望为1/3三角形GDF
即h'=1/3*h=1/3h
即平均面积上=1/2*2l*(8/3)h=(8/3)hl

三角形ABC的面积为1/2*2l*6h=6hl
代入Rate的式子，得Rate=11/18hl
E=Rate*S

根据三角形面积公式S=1/2[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)] 应该先将点进行逆时针排序
因为可以先选取固定点x1y1，所以将三组坐标按照x进行排序之后，判断最后两个点的y坐标，如果y2>y3则进行交换
E=11/18*1/2[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)]*36
 =11*[(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)]

hint:https://www.cnblogs.com/WAautomaton/p/11211864.html

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
typedef long long ll;

struct Node{
	ll x;
	ll y;
};

bool cmp(Node a,Node b)
{
	return a.x<b.x;
	
}


int main()
{
	Node a[3]; 
	while(~scanf("%lld%lld%lld%lld%lld%lld",&a[0].x,&a[0].y,&a[1].x,&a[1].y,&a[2].x,&a[2].y))
	{
		sort(a,a+3,cmp);
		
		if(a[1].y>a[2].y)
		{
			Node temp;
			temp=a[1];
			a[1]=a[2];
			a[2]=temp;
		}
		
		ll s=11*((a[0].x*a[1].y-a[1].x*a[0].y)+(a[1].x*a[2].y-a[2].x*a[1].y)+(a[2].x*a[0].y-a[0].x*a[2].y));
		s=abs(s);
		printf("%lld\n",s);		
	}

}

/*************************************************************************************************************************************/
G
链接：https://ac.nowcoder.com/acm/contest/881/G
来源：牛客网
/***********************************************************************************************************************************/
H
链接：https://ac.nowcoder.com/acm/contest/881/H
来源：牛客网

题意：给你一组数字，求所有异或和为0的所有子集大小之和

一开始想到的是异或和为0，求前缀数组！结果这里要用到一个关于异或和的新的知识点：线性基
线性基详解：https://blog.csdn.net/a_forever_dream/article/details/83654397
线性基的操作：https://blog.csdn.net/qaq__qaq/article/details/53812883
线性基的总结+模板：https://blog.csdn.net/u013534123/article/details/79875825
一个很简洁明了的介绍：https://blog.csdn.net/qaq__qaq/article/details/53812883

什么是线性基？
就是经过处理的一组序列，他满足这样几个条件
1.原序列里面的任意一个数都可以由线性基里面的一些数异或得到
2.线性基里面的任意一些数异或起来都不能得到0
3.线性基里面的数的个数唯一，并且在保持性质1的前提下，数的个数是最小的

那么它是怎么构造的呢？
我们设有一个数组d，表示序列a的线性基，下标从0开始算。对于序列里面的每一个数，我们尝试将它插入到线性基里面去
我们设x(2)为x的二进制数
for i=60 to 0
if(x(2)的第i+1位为1)
{
       if(d[i]为0)
      {
             d[i]=x;
             break;
       }
       else x=x^d[i];
}
据此，我们可以得到一个关于d数组的性质：若d[i]不为0，则d[i](2)的第i+1位为1，并且d[i](2)的最高位就是第i+1位
关于异或的一个小性质:如果满足a^b^c=0，那么a^b=c，所以如果a^b=c，那么a^c=b

那么线性基可以干什么？
1.求在一个序列中取若干个数使得异或和最大
2.球在一个序列中取若干个数使得异或和最小
3.从一个序列中取任意个元素进行异或求能异或出来的所有数字中第k小的那个

hint：https://blog.csdn.net/u013534123/article/details/96482572

对于这道题而言，子集大小之和可以转换为计算每个数字的出现次数之和
因为异或和为0的子集相当于可以用集合中的一部分数字去表示另外一部分数字，所以可以联想到用线性基去解决问题

对于这n个数字求线性基，假设线性基里的个数为r(r<n)
那么对于线性基外的另外n-r个数字，他们的任意组合都可以在线性基内的r个数字找到一个组合使得异或和为0

现在考虑计算线性基外每个数字的贡献
对于任意一个线性基外的数字，它都可以和任意剩下n-r-1个数字组合，对应有2^(n-r-1)种方法
每一个方法都可以在线性基内找到一个组合使得异或和为0

考虑线性基内部的r个数字的贡献
根据线性基的性质，如果对于同样的n个数字，能够找到两个不同的线性基，那么这两个线性基中的数字个数一定是相等的
对于r个数字中的任意一个数字，如果用其余n-1个数字能够表示
说明存在另一个线性基能够表示所有的n个数字，并且这个线性基的数字个数也是r，因此这个点的贡献还是2^(n-r-1)
如果用其余n-1个数字不能表示，那么说明只要选择了这个数字就不存在一种方案使得最后异或和为0，所以贡献为0

#include <bits/stdc++.h>
#define LL long long
using namespace std;
 
const int N = 1e5 + 10;
const int mod = 1e9 + 7;

int n,m,pw[N],tot;
vector<LL> LB;
bool v[N];
LL a[N];
/*
对于一个新加入的数字，从最高为考试往后扫，如果某一位该向量是1，但是之前的向量组中没有一个这一位是1，
那么这一位就放如这个数字并且break；如果之前已经有该位为1的，那么该数字异或该位之前对应的数字。
最后的结果是，新加入的数字x，要么被添加到某一个二进制位，要么变成0，说明这个数字对应的二进制向量不属于极大线性无关组
*/ 
struct Linear_Basis//线性基的模板 
{
    LL b[64],tot;
 
    inline void init()//线性基的初始化 
    {
        tot=0;//tot表示二合法数字的个数，即可以被加入线性基的数字 
        memset(b,0,sizeof(b));
    }
/*
如果向线性基中插入数x，从高位到低位扫描它为1的二进制位。 
扫描到第i时，如果ai不存在，就令ai=x，否则x=x异或ai。 
x的结局是，要么被扔进线性基，要么经过一系列操作过后，变成了0
*/ 
    inline bool ins(LL x)//线性基的插入 
    {
        for(int i=62;i>=0;i--)
            if (x&(1LL<<i))
            {
                if (!b[i]) {b[i]=x;tot++;break;}
                x^=b[i];
            }
        return x>0;
    }
 
} LB1,LB2,LB3;
 
int main()
{
    pw[0]=1;
    for(int i=1;i<N;i++)//对2的n次方进行打表，用快速幂也可以 
        pw[i]=(LL)pw[i-1]*2%mod;
        
    while(scanf("%lld",&n)!=EOF)
    {
        LB.clear();
        LB1.init(); LB2.init();
        for(int i=1;i<=n;i++)
        {
            scanf("%lld",&a[i]);
			v[i]=0;//V数组是一个标记数组，标记a[i]数组是在线性基内还是外 
            if (LB1.ins(a[i]))//如果可以插入线性基LB1 
            {
                v[i]=1;//
                LB.push_back(a[i]);//并把a[i]保存到集合LB中 
            }
        }
        //LB1中储存在线性基里面的数字，即r个在线性基中的数字 ，LB.tot为r 
        if (n==LB1.tot)//这里特判，如果n个数字都在线性基里面，则没有一种合法情况，即n=r 
        {
            printf("0\n");
            continue;
        }
        
        //计算线性基外的n-r个数字的贡献 (n-r)*2^(n-r-1)
        LL ans=(LL)(n-LB1.tot)*pw[n-LB1.tot-1]%mod;
        
        //考虑剩下r个在线性基内部的数字的贡献 
        for(int i=1;i<=n;i++)
        {
            if (v[i]) continue;//判断v[i]是否为0 
            LB2.ins(a[i]);//如果a[i]没有被加入LB1中，则加入LB2中，即LB2中的数字为在线性基外部的那n-r个数字 
        }
        
        /*
		对于r个数字中的任意一个数字，如果用其余n-1个数字能够表示
		说明存在另一个线性基能够表示所有的n个数字，并且这个线性基的数字个数也是r，因此这个点的贡献还是2^(n-r-1)
		如果用其余n-1个数字不能表示，那么说明只要选择了这个数字就不存在一种方案使得最后异或和为0，所以贡献为0
		我们没必要每次重新求n-1个数字的线性基。只需要先求n-r个数字的线性基，然后在这个基的基础上尝试添加r-1个数字
		*/ 
        for(int i=0;i<LB1.tot;i++)//用两层遍历判断这个数字能不能被其他n-1个数字 
        {
            LB3=LB2;
            for(int j=0;j<LB1.tot;j++)
            {
                if (i==j) continue;
                LB3.ins(LB[j]);//LB3在LB2的基础上判断在线性基LB内部的数字能否加入到LB3中，
								//即能否用LB中的数字表示线性基外的数字 
            }
            if (!LB3.ins(LB[i]))//如果不能被加入LB3，则说明线性基内部的这一个数字的贡献为2^(n-r-1) 
                ans=(ans+pw[n-LB1.tot-1])%mod;//更新ans的值 
        }
        
        printf("%lld\n",ans);
    }
    return 0;
}

/***********************************************************************************************************************************/
I
链接：https://ac.nowcoder.com/acm/contest/881/I
来源：牛客网
/************************************************************************************************************************************/
J Fraction Comparision
/*
链接：https://ac.nowcoder.com/acm/contest/881/J
来源：牛客网
题目描述 
Bobo has two fractions x/a and y/b. He wants to compare them. Find the result.
输入描述:
The input consists of several test cases and is terminated by end-of-file.
Each test case contains four integers x, a, y, b.
0≤x,y≤1018 
1≤a,b≤109
* There are at most 
10
5
105 test cases.
输出描述:
For each test case, print `=` if x/a=y/b. Print `<` if x/a<y/b. Print `>` otherwise.
示例1
输入
1 2 1 1
1 1 1 2
1 1 1 1
输出
<
>
=
*/ 

这道题是分数比较大小，思路是将分数先化成带分数，先比较整数部分，之后比较真分数部分，真分数部分通过交叉相乘进行比较
还有就是要特判分子为零的情况，内外最好都要特判一下，因为分子在化成真分数之后很有可能分子取余之后就变成0

#include<iostream>
using namespace std;
typedef long long ll;

int main()
{
	ll x,a,y,b;
	while(~scanf("%lld%lld%lld%lld",&x,&a,&y,&b))
	{
		ll ax=x/a;
		ll by=y/b;
		if(x==0&&y!=0) printf("<\n");
		else if(x!=0&&y==0) printf(">\n");
		else if(x==0&&y==0) printf("=\n");
		else
		{
			if(ax>by) printf(">\n");
			else if(ax<by) printf("<\n");
			else
			{
				x%=a;
				y%=b;
				if(x==0&&y!=0) printf("<\n");
				else if(x!=0&&y==0) printf(">\n");
				else if(x==0&&y==0) printf("=\n");
				else
				{
					if(x*b>a*y) printf(">\n");
					else if(x*b<a*y) printf("<\n");
					else printf("=\n");					
				}
	
			}			
		}
	}
//	cin>>x>>a>>y>>b;
	return 0;
	
}
