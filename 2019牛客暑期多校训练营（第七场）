A String
链接：https://ac.nowcoder.com/acm/contest/887/A
来源：牛客网

题意：一个01字符串，将它切割成若干个完美字符串，完美字符串的意义是这个字符串成环之后的字典序最小

题解：字符串的最小表示和暴力解法
无论是哪一种方法，遍历方法都是先以整个字符串为一个序列start=0，end=n-1，判断着整个字符串是不是最小表示的，
如果不是的话则end--；
如果是的话则start=end；end=n-1
字符串的最小表示是一种判断这个字符串是否是循环之后的最小字典序的那个字符串
#include<cmath>
#include<iostream>
using namespace std;
typedef long long ll;

bool judge(string s){
    int n=s.size();
    for(int i=1;i<n;i++){
        for(int j=0;j<n;j++){
            if(s[j]<s[(i+j)%n]) break;
            if(s[j]>s[(i+j)%n]) return false;
        }
    }
    return true;
}

int main(){
    int t;
    cin>>t; 
    while(t--){
        string s;
        cin >> s;
        int n=s.size(),i=0;
        while(i<n){
            for(int j=n-i;j>0;j--){
                if(judge(s.substr(i,j))){
                    cout << s.substr(i,j);
                    i+=j;
                    if(i<n) printf(" ");
                    break;
                }
            }
        }
        printf("\n");
    }
    return 0;
}

/***************************************************************************************************************************************/
B Irreducible Polynomial

链接：https://ac.nowcoder.com/acm/contest/887/B
来源：牛客网

题意：给你一个多项式的系数，判断这个多项式是不是不可约多项式

题解：最高次为1的时候一定不可约，最高次3次及3次以上的时候一定可约
判断2次的情况，如果这个函数有0点，则可约，如果没有0点，则不可约，判断delta的值

#include<iostream>
#include<cmath>
using namespace std;
typedef long long ll;
ll a[30];

int main()
{
	ll t;
	ll n;
	cin>>n;
	while(n--)
	{
		//int a,b,c;
		cin>>t;
		for(int i=0;i<=t;i++) cin>>a[i];
		if (t<=1) {cout<<"Yes"<<endl;}
		else if (t>2) {cout<<"No"<<endl;}
		else
		{
		 //cin>>a[0]>>a[1]>>a[2];
			if (a[1]*a[1]-4*a[0]*a[2]>=0)
				cout<<"No"<<endl;
			else
				cout<<"Yes"<<endl;
		}		
	}

}


/***************************************************************************************************************************************/
C Govening Sand

链接：https://ac.nowcoder.com/acm/contest/887/C
来源：牛客网

题意：有n种树，每种树有三种属性，高度h，数量p，砍掉一棵树的代价c
(n < 1e5, h < 1e9, p < 1e9, c < 1e2)
现在要你花费最少的代价砍掉一些树，使得剩下的树木最高的树木的数量超过剩下树木数量的1/2

我们枚举高度，把比他高的树木全部砍掉，比他矮的树木砍掉一些 使得剩余的比他矮树木小于该高度的树木数量
对于树木进行排序，按照高度，且先算出砍掉所有树木的代价
用逆向思维，我们枚举高度，把相同高度的数量cur和全部砍掉的代价多少算出来，
再把比他矮的树木砍掉最多(cur-1)棵的最大代价是多少，这些是我们不用砍的树木的代价，我们总代价减去他就是我们要求的最小代价
这里面有个很好的处理 c < 1e2, 所以找出最优代价最高的树木，我们可以用一个数组先来存，比当前高度要矮的树木，每种代价有多少棵

#include<bits/stdc++.h>
#define ll long long
#define maxn 100005
using namespace std;
struct node {
	ll p, h;
	int c;
} tree[maxn];
ll c[205];
bool cmp(node aa, node bb) {
	return aa.h < bb.h;
}
//有k棵小于最高树的树 不用砍掉
//返回最多可以省下多少代价
ll func(ll k) {
	ll ans = 0, sc;
	for(int i = 200; i >= 1; i--) {
		sc = min(k, c[i]);
		ans += sc * i;
		k -= sc;
		if(k == 0) {
			return ans;
		}
	}
	return ans;
}
 
using namespace std;
int main() {
	int n;
	while(~scanf("%d", &n)) {
		for(int i = 0; i < n; i++) {
			scanf("%lld %d %lld",&tree[i].h,&tree[i].c, &tree[i].p);
		}
		sort(tree, tree+n, cmp);
		memset(c, 0, sizeof(c));
		ll s = 0;
		for(int i=n-1; i>=0; i--){
			s += tree[i].c * tree[i].p;
		}
		ll ans=s;//砍掉全部树的代价 
		ll num=0;
		int i, j;
		for(i = 0; i < n; i=j){//枚举高度 
			ll tot = tree[i].p;
			ll cur = tree[i].p * tree[i].c;
			for(j = i+1; j < n && tree[i].h == tree[j].h; j++){
				tot += tree[j].p;//加入相同的高度的数量 
				cur += tree[j].p * tree[j].c;//加入相同的高度的代价
			}
			ans = min(ans, s - cur - func(tot-1)); 
			for(int z = i; z < j; z++){//把等于tree[i].h高度的数目数量加入c数组中 
				c[tree[z].c] += tree[z].p;
			}
		}
		cout<<ans<<endl;
		
	}
	return 0;
}

/***************************************************************************************************************************************/
D Number
链接：https://ac.nowcoder.com/acm/contest/887/D
来源：牛客网

题意：给你两个数n和p，让你输出n位可以被p整除的数

题解：输出p，n-p.size()位补0
#include<iostream>
using namespace std;
typedef long long ll; 

int main(){
    ll n;
	string p;
    cin>>n;
	cin>>p;
    if(p.size()>n){
        cout<<"T_T";
    }else if(p.size()==n){
        cout<<p;
    }else{
        cout<<p;
        for(int i=0;i<n-p.size();i++){
            printf("0");
        }
    }
    return 0;
} 

/***************************************************************************************************************************************/
E Find the Median

链接：https://ac.nowcoder.com/acm/contest/887/E
来源：牛客网

hint:https://www.cnblogs.com/wizarderror/p/11335953.html?tdsourcetag=s_pcqq_aiomsg

题意：首先有一个空序列，接下来给出两个数组L[i]和R[i]，表示有i次操作，将区间Li到Ri之间的所有数字插入这个序列中，求每一次插入之后的中位数

小于中位数的数字恰好有tot/2个，这样就将问题转化成如何求等于某个数x的数一共有多少个

假设做断电小于等于x的去加一共有q个，

如果x不落在任何一个区间，那么就是i=1—q的(Ri-Li+1)的和
如果x落在了m个区间之中，那么答案就是sum(i=1—(q-m)(Ri-Li+1))+sum(i=(q-m+1)—(q)(Ri-Li+1))

令Ni=Ri+1
这样ans=sum(Ni<=x(Ni))-sum(Li<=x(Li+m))

可以归于一种情况，因为在第一种情况下m=0
对于区间的左右端点考虑离散化，因为可能区间是[1,3]和[345678,567890999]这样的

用两个树状数组分别维护Ni和Li的前缀和以及m
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int maxn = 400010;

ll n, cnt, tot;
ll x[maxn], y[maxn], l[maxn], r[maxn];
ll a1, b1, c1, a2, b2, c2, m1, m2;
ll z[maxn<<1], bit1[maxn<<1], bit2[maxn<<1];
 
void add(ll a[], ll i, ll x) {
    while (i<=cnt) {
        a[i] += x;
        i += i&(-i);
    }
}
ll query(ll a[], ll i){
    ll res = 0;
    while (i>0) {
        res += a[i];
        i -= i&(-i);
    }
    return res;
}
void read()
{
    cin>>n;
    cin>>x[1]>>x[2]>>a1>>b1>>c1>>m1;
    cin>>y[1]>>y[2]>>a2>>b2>>c2>>m2;
    for(ll i = 1; i <= n; i++){
        if(i>2){
            x[i] = (a1*x[i-1]+b1*x[i-2]+c1)%m1;
            y[i] = (a2*y[i-1]+b2*y[i-2]+c2)%m2;
        }
        l[i] = min(x[i],y[i])+1;
        r[i] = max(x[i],y[i])+1;
        z[++cnt] = l[i]; z[++cnt] = r[i]+1;
    }
    sort(z+1,z+cnt+1);
    cnt = unique(z+1,z+cnt+1)-z-1;
} 

int main()
{
    read();
    for(ll i = 1; i <= n; i++) {
        tot += r[i]-l[i]+1;
        ll L=lower_bound(z+1,z+cnt,l[i])-z, R=lower_bound(z+1,z+cnt+1,r[i]+1)-z;
        add(bit1,L,-l[i]), add(bit1,R,r[i]+1);//Ni前缀和 
        add(bit2,L,1), add(bit2,R,-1);//Li前缀和 
        //二分查找
        ll left = 1, right = 1e9;
        while(left<right) {
            ll mid = (left+right)/2;
            ll q = upper_bound(z+1,z+cnt,mid)-z-1;
            ll tmp = query(bit1, q)+query(bit2, q)*(mid+1);//找到有多少个小于当前值的数量 
            if(tmp<(tot+1)/2) left = mid+1;
            else right = mid;
        }
        cout<<left<<endl;
    }
    return 0;
}


/***************************************************************************************************************************************/
F Energy Stone
链接：https://ac.nowcoder.com/acm/contest/887/F
来源：牛客网

hint：https://www.cnblogs.com/wizarderror/p/11338597.html?tdsourcetag=s_pcqq_aiomsg

题意：
有n块能量石，每秒钟会增加Li的能量，但是一旦增长到了Ci它就不会增长了，
它初始的能量为Ei。 
现在有若干个时刻ti，会选择下标在[Si,Ti]的能量石吸取它们的能量，这些能量石的能量变为0，
并依据上述规则继续增长。 问最后一共吸取了多少能量？

题的做法是线性期望性，
比如有m次查询，我直接每次求多个数据的期望和，最后把这m次期望加起来就是答案，
但是你发现每次求多个数据的期望的时候操作次数太多了，导致很难求或者时间复杂度过高。
那么我们换个思路想一下，要是我们能分别求出每个数据在这m次查询中的期望，那么最后加起就是所有数据的期望。

这里我们考虑每块石头吸取了多少能量（即每个石头对答案的贡献）
假如我们能够维护出每块石头被吸取能量的若干个时间点，那么它们的增长能量的时间区间会是一条条线段(时间差)。
那么考虑这些线段长度大于等于[Ci/Li]的线段，它们的贡献是Ci，其他线段都没有长满，那么是ti*Li 。

那么考虑如何维护线段？用set + 树状数组
用一个set，考虑插入一个时间点会让一条原本的线段分裂成两段，删除一个时间点会让两个线段合并。（至多修改三个区间差）

那么对于一次吸取操作(ti，Si，Ti)，相当于我们枚举到Si的时候插入ti这个时间点，枚举到Ti+1的时候删除ti这个时间点。

只是在没遇到Ti+1前一直保留这个时间点ti，这样就能保证在这个区间内每个点都能有这个时间点的信息
然后我们用树状数组维护这个线段
两个树状数组分别维护：
1.每个时间段一共有多少时间（可以求出<[Ci/Li]累计的时间）
2.每个时间段的个数（可以求出>=[Ci/Li]的时间段总数）
最后要注意Li等于0的情况，处理一下初始状态就可以了

关于计算初始状态，
对于计算每个石头的贡献，我们实际是由最开始一个时间点出发，然后不断到下一个时间点，直到最后一个时间点得出答案。
如果合并成线段的话，就变成最开始的一个时间点加上相邻的点构成的线段也可以到达最后一个时间点。
因此我们计算初始状态是用的第一个时间点，与我们树状数组存的时间差没有关系，不要搞混淆了。ans更新的时候s.size()-1减的就是第一个时间点。


#include<bits/stdc++.h>
#define pb push_back
#define F first
#define S second
using namespace std;
typedef long long ll;
const int maxn=2e5+6;
int _,n,m;
vector <int> h[maxn];
set <int> s;
ll d,E[maxn],L[maxn],C[maxn],a[maxn],b[maxn],ans;
ll qry1(int x){
    ll ret=0;
    while (x){
        ret+=a[x];
        x-=x&(-x);
    }
    return ret;
}
ll qry2(int x){
    ll ret=0;
    while (x){
        ret+=b[x];
        x-=x&(-x);
    }
    return ret;
}
void Add(int x,int y){
    while (x<maxn){
        if (y>0) a[x]++; else a[x]--;
        b[x]+=y;
        x+=x&(-x);
    }
}
void add(int x){
    if (s.size()==0) {s.insert(x);return;}
    auto p=s.lower_bound(x);
    if (p==s.begin()){
        int t=(*p)-x;
        Add(t,t);
    } else if (p==s.end()){
        int t=x-(*(prev(p)));
        Add(t,t);
    } else {
        int s=(*p)-x,t=x-(*(prev(p)));
        Add(s,s);Add(t,t);
        Add(s+t,-s-t);
    }
    s.insert(x);
}
void del(int x){
    auto p=s.find(x);
    if (s.size()==1) {s.erase(p);return;}
    if (p==s.begin()){
        int t=(*(next(p)))-x;
        Add(t,-t);
    } else if (p==prev(s.end())){
        int t=x-(*(prev(p)));
        Add(t,-t);
    } else {
        int s=(*(next(p)))-x;
        int t=x-(*(prev(p)));
        Add(t,-t);
        Add(s,-s);
        Add(t+s,t+s);
    }
    s.erase(p);
}
 
int main(){
    int kase=0;
    scanf("%d",&_);
    while (_--){
        s.clear(); scanf("%d",&n); ans=0;
        for (int i=1;i<=n;i++) scanf("%lld%lld%lld",&E[i],&L[i],&C[i]);
        scanf("%d",&m);
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for (int i=1;i<=n+1;i++) h[i].clear();
        while (m--){
            int t,l,r;
            scanf("%d%d%d",&t,&l,&r);
            h[l].pb(t); h[r+1].pb(-t);
        }
        for (int i=1;i<=n+1;i++){
            for (auto x:h[i]){
                if (x>0) add(x); else del(-x);
            }
            if (!s.size()) continue;
            ans+=min(C[i],E[i]+(*s.begin())*L[i]);
            if (L[i]==0) continue;
            d=C[i]/L[i];
            ans+=qry2(d)*L[i]+(s.size()-1-qry1(d))*C[i];
        }
        printf("Case #%d: %lld\n",++kase,ans);
    }
    return 0;
}
/***************************************************************************************************************************************/
G
/***************************************************************************************************************************************/
H
/***************************************************************************************************************************************/
I
/***************************************************************************************************************************************/
J A+B problem
链接：https://ac.nowcoder.com/acm/contest/887/J
来源：牛客网

题意：给你两个数字A和B，要求反向相加之后将结果反向输出

题解：so easy

#include <iostream>
using namespace std;
 
typedef long long ll;
 
ll f(ll a)
{
    ll b = 0;
    while(a)
    {
        b = 10 * b + a % 10;
        a /= 10;
    }
    return b;
}
 
int main()
{
    ll a, b;
    int t;
    cin >> t;
    while(t--)
    {
        cin >> a >> b;
        cout << f(f(a) + f(b)) << endl;
    }
    return 0;
}

/***************************************************************************************************************************************/
