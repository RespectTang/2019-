A digits

链接：https://ac.nowcoder.com/acm/contest/885/A
来源：牛客网

题意：你有一个数n，让你求另一个数M，满足M可以被n整除，并且M的每一位加起来也可以被n整除

一开始想分类讨论各种情况，结果最终结果和一开始猜测的差不多，直接输出n个n就好了

#include<iostream>
using namespace std;
typedef long long ll;

int main()
{
	ll T;
	scanf("%lld",&T);
	while(T--)
	{
		ll n; 
		scanf("%lld",&n);
				for(int i=1;i<=n/3;i++)
				{
					printf("%lld",n);
				}
				printf("\n");

	}
	return 0;
 } 
/*****************************************************************************************************************************************/
B generator 1

链接：https://ac.nowcoder.com/acm/contest/885/B
来源：牛客网

题意：广义斐波那契数列求第n项，但是这个n非常的大


题目有两种做法

1.用十进制快速幂对于每一位的n都进行一次乘法计算
hint：https://www.cnblogs.com/zhuyou/p/11285849.html
十进制的快速幂还是会TLE，所以在十进制的基础上应该还要增加二进制二次幂来优化一些常数的幂
大概的思想是将每一位的n拆开，然后res=（res^10）^(n[i]-'0')

#include<bits/stdc++.h>
#define mes(a, b) memset(a, b, sizeof a)
using namespace std;
typedef long long ll;
const int maxn = 1e6+10;
ll mod;
char n[maxn];
 
struct Mat{//定义矩阵 
    ll mat[4][4];
    Mat(){
        mes(mat, 0);
    }
    void init(){
        for(int i = 1; i <= 2; i++)
            mat[i][i] = 1;
    }
 
    Mat operator * (const Mat &a)const{//矩阵乘法 
        Mat ans;
        for(int i = 1; i <= 2; i++){
            for(int j = 1; j <= 2; j++){
                for(int k = 1; k <= 2; k++){
                    ans.mat[i][j] += mat[i][k]*a.mat[k][j]%mod;
                    ans.mat[i][j] %= mod;
                }
            }
        }
        return ans;
    }
};

Mat pow(Mat a, ll b){
    Mat ans;
    ans.init();
    while(b){
        if(b&1)
            ans = ans*a;
        a = a*a;
        b >>= 1;
    }
    return ans;
}
 
int main(){
    ll a, b, x1, x0;
    scanf("%lld%lld%lld%lld", &x0, &x1, &a, &b);
    scanf("%s%lld",n, &mod);
    int len = strlen(n);
    Mat ans; ans.init();
    Mat res;
    res.mat[1][1] = a; res.mat[1][2] = b;
    res.mat[2][1] = 1;
    for(int i = len-1; i >= 0; i--){//
        ans = ans*pow(res, n[i]-'0');//十进制快速幂 计算res=（res^10）^(n[i]-'0')
        res = pow(res, 10ll);//二进制快速幂优化 res^10 
    }
    Mat f;
    f.mat[1][1] = x1;
    f.mat[2][1] = x0;
    f = ans*f;
    printf("%lld\n",f.mat[2][1]);
    return 0;
}


2.在模的意义下广义斐波那契数列存在循环节，寻找循环节来压缩n
hint：https://blog.csdn.net/ftx456789/article/details/98309804

#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 2;
LL mod = 1000000007;
int cnt,ct;
LL pri[100005];
LL num[100005];
struct Matrix
{
    LL m[N][N];
} ;
Matrix A;
Matrix I = {1, 0, 0, 1};
char str[1000005];
map<int,int>y;
Matrix multi(Matrix a,Matrix b)
{
    Matrix c;
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            c.m[i][j]  =0;
            for(int k=0; k<N; k++)
            {
                c.m[i][j] =(c.m[i][j]+a.m[i][k] * b.m[k][j]%mod)%mod;
            }
        }
    }
    return c;
}
Matrix power(Matrix A,LL n)
{
    Matrix ans = I, p = A;
    while(n>0)
    {
        if(n & 1)
        {
            ans = multi(ans,p);
            n--;
        }
        n >>= 1;
        p = multi(p,p);
    }
    return ans;
}
LL quick_mod(LL a,LL b,LL MOD)
{
    LL ans = 1;
    a %= MOD;
    while(b>0)
    {
        if(b & 1)
        {
            ans = ans * a % MOD;
            b--;
        }
        b >>= 1;
        a = a * a % MOD;
    }
    return ans;
}
LL quick_mul(LL a,LL b,LL MOD)
{
    LL ans=0;
    while(b)
    {
        if(b&1)
            ans=(ans+a)%MOD;
        a=(a+a)%MOD;
        b=b/2;
    }
    return ans;
}
LL Legendre(LL a,LL p,LL MOD)
{
    LL t = quick_mod(a,(p-1)>>1,MOD);
    if(t == 1) return 1;
    return -1;
}
void yinzi(LL x)
{
    for(int i=2; i*i<=x; i++)
    {
        if(x%i==0)
        {
            while(x%i==0)
            {
                y[i]++;
                x=x/i;
            }
        }
    }
    if(x>1)
    {
        y[x]++;
    }
}
LL lcm(LL a,LL b)
{
    return a/__gcd(a,b)*b;
}
LL get_len(LL a,LL b,LL mod)
{
    yinzi(mod);
    for(map<int,int>::iterator i=y.begin(); i!=y.end(); i++)
    {
        pri[cnt]=i->first;
        num[cnt]=i->second;
        cnt++;
    }
    LL ans=1;
    LL c=a*a+4*b;
    for(int i=0; i<cnt; i++)
    {
        LL p=1;
        if(pri[i]==2)
        {
            p*=3;
            for(int j=0; j<=num[i]; j++)
                p*=pri[i];
        }
        else if(c%pri[i]==0)
        {
            p*=pri[i]*(pri[i]-1);
            for(int j=1; j<num[i]; j++)
                p*=pri[i];
        }
        else if(Legendre(c,pri[i],pri[i])==1)
        {
            p*=(pri[i]-1);
            for(int j=1; j<num[i]; j++)
                p*=pri[i];
        }
        else
        {
            p*=(pri[i]-1)*(pri[i]+1);
            for(int j=1; j<num[i]; j++)
                p*=pri[i];
        }
        ans=lcm(ans,p);
    }
    return ans;
}
int main()
{
    LL a,b,c,d;
    cin>>c>>d>>a>>b;
    cin>>str>>mod;
    LL p=get_len(a,b,mod);
    LL n=0;
    int len=strlen(str);
    for(int i=0; i<len; i++)
    {
        n=quick_mul(n,10,p)+str[i]-'0';
    }
    A.m[0][0]=a;
    A.m[0][1]=b;
    A.m[1][0]=1;
    A.m[1][1]=0;
    Matrix T=power(A,n-1);
    long long ans=(T.m[0][0]*d%mod+T.m[0][1]*c%mod)%mod;
    printf("%lld\n",ans);
    return 0;
}




/*****************************************************************************************************************************************/
C
/*****************************************************************************************************************************************/
D
/*****************************************************************************************************************************************/
E
/*****************************************************************************************************************************************/
F
/*****************************************************************************************************************************************/
G subsequence 1
链接：https://ac.nowcoder.com/acm/contest/885/G
来源：牛客网
题意：给你两个由数字组成的字符串s,t，问s有多少个子序列比t大，需要注意的是子序列是在顺序固定的情况下可以无序

这道题应该分成两个部分思考：1.在相同长度下 2.在不同的长度下

这里要用刀排列组合的内容，所以可以先对组合数进行打表，这样的话可以省去很多不必要的计算的时间
同时组合数有定理：C(n,m)=C(n-1,m-1)+C(n-1,m)，杨辉三角可证

2.在不同的长度下 
从前往后二重循环遍历s，t数组
ans=0；
找到s[j]>t[i]的，然后往后数，这是这一位的答案ans+=C(s[j]后面的位数,t的位数)

1.在相同的位数下，使用dp，是一个s.size*t.size的二维dp数组
分别遍历s和t，从后往前比较
dp[i][j]表示s的后i位中比t的后j位大的有多少个
如果s[i]大于t[j]，dp[i][j]=dp[i][j-1]+C(j-1,i-1)
如果s[i]小于t[j]，dp[i][j]=dp[i][j-1]+0
如果s[i]等于t[j]，dp[i][j]=dp[i][j-1]+dp[i-1][j-1]
/*****************************************************************************************************************************************/
H subsequence 2
链接：https://ac.nowcoder.com/acm/contest/885/H
来源：牛客网

hint:https://blog.csdn.net/gml1999/article/details/98496805

题意：给你几组样例，给你两个字符A,B，一个长度LEN，一个长度为LEN的字符串STR，STR是字符串S的子串
STR是S删掉除过AB两字符剩下的子串，现在求S，多种情况输出一种。构造不出来输出-1

拓博排序题目，首先根据已知的序列构造出一个拓补图，寻找入度为0的点，找到之后删除这个点和相应的边关系，这样就可以得到一个序列
为了使答案唯一所以一般从字典序最小的那一端开始，同时要运用一个哈希函数给每一个字符编号

#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int maxn = 1e6 + 5;
const int INF = 0x3f3f3f3f;
const ll mod = 1e9 + 7;
int num[30];
int in[maxn];//入度 
vector<int> e[maxn];
string ans="";
int n,m;
int topsort()
{
	queue<int> q;
	for(int i=0;i<26;i++){
		if(in[i*10000+1]==0&&num[i]!=0){
			q.push(i*10000+1);
		}
	}
	while(!q.empty()){
		int u=q.front();q.pop();
		ans+=(u-1)/10000+'a';
		for(int v=0;v<e[u].size();v++){
			if(--in[e[u][v]]==0){
				q.push(e[u][v]);
			}
		}
	}
    return ans.size();
}
int main()
{
	cin>>n>>m;
	int M=(m-1)*m/2;
	for(int i=0;i<M;i++){
		char a,b; int len;
		int na=0; int nb=0;
		cin>>a>>b>>len;
		if(len==0) continue;
		string s; cin>>s;
		int pre=-1;//首结点 
		for(int i=0;i<len;i++){
			int pos=0;
			if(s[i]==a){
				na++;
				pos=(s[i]-'a')*10000+na;
			}else{
				nb++;
				pos=(s[i]-'a')*10000+nb;
			}
			if(pre==-1){
				pre=pos;
			}else{
				e[pre].push_back(pos);
				in[pos]++;
				pre=pos;
			}
		}
		if(num[a-'a']==0) num[a-'a']=na;//na和nb判断这个字符是否在原字符串中存在 
		if(num[b-'a']==0) num[b-'a']=nb;
		//这里不能改写成num[a-'a'] = 1, num[b-'a'] = 1; 因为输入的a，b可能不在原字符串中出现 
	}
	
	if(topsort()==n) cout<<ans<<endl;
	else cout<<-1<<endl;
	return 0;
} 



/*****************************************************************************************************************************************/
I
/*****************************************************************************************************************************************/
J
/*****************************************************************************************************************************************/
