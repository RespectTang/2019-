A
/***********************************************************************************************************************************/
B Crazy Binary String
链接：https://ac.nowcoder.com/acm/contest/883/B
来源：牛客网

题意：给你一个01字符串，如果一个区间内的0 的个数和1的个数相等，那么这个子区间就是合法的，问最长的合法子区间长度

题目要求输出两个值，一个是有序的一个是无序的，无序的很好计算，就是0和1的个数字最小的那个乘以2
有序的话设0的权值为-1，求前缀和，前缀和相等的两个区间为合法的，遍历一遍求最长的序列即可

#include<iostream>
#include<cstring>
#include<map>
#include<math.h>
using namespace std;
typedef long long ll;

ll pre[100005];
ll num_0=0,num_1=0; 
//map <int,int> a;
ll a[200010];

int main()
{
	ll n;
	scanf("%lld",&n);
	string s;
	cin>>s;
	ll ans1=0;
	for(ll i=0;i<n;i++)
	{
		if(i==0) pre[0]= s[i]=='0'?-1:1;
		else pre[i]=pre[i-1]+(s[i]=='0'?-1:1);
		if(s[i]=='0') num_0++;
		else num_1++;
	
		if(pre[i]==0) ans1=max(ans1,i+1);//如果pre[i]==0，那么从上一个0位置到i中0的个数和1的个数相等，这是一个合法的序列 
		
		//计算最长子序列，前缀和相等的两个位置中间的0和1的个数相等
		//a数组用来存储相等的前缀和的位置在哪里 
		if(a[pre[i]+100000]){//如果前缀和不为0，就是之前存在这样的前缀和 
		//因为前缀和有可能是负值，所以将前缀和+10w再处理,这样的话下标不会为负数
		//并且前缀和的最大值和最小值也是+-10w 
             ans1=max(ans1,i-(a[100000+pre[i]]==-1?0:a[100000+pre[i]]));
        }
		else//如果之前的前缀和不存在，则在a数组中保存这个位置 
		{
            a[100000+pre[i]]=i;
        }
		
	}
	ll ans2=min(num_1,num_0)*2;
	printf("%lld %lld",ans1,ans2); 
	return 0;
 } 
 
 /***********************************************************************************************************************************/
 C
 /***********************************************************************************************************************************/
 D Big Integer
 链接：https://ac.nowcoder.com/acm/contest/883/D
来源：牛客网

题意是说，有一个全为1的极大数，A(n)为有n个1的极大数，给出三个数字n,m,p，分别求在i在1到n，j在1到m的情况下A(i^j)%p==0的情况有多少种

hint：https://blog.csdn.net/ftx456789/article/details/97294635 代码来源为这个博客
      https://www.cnblogs.com/Yinku/p/11249564.html

不是很想写题解了，这两个博客我觉得讲的蛮详细的了
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
long long quickmod(long long a,long long b,long long mod=1e9+7)//快速幂取模 
{
    long long ans=1;
    while(b)
    {
        if(b%2==1)
            ans=ans*a%mod;
        b=b/2;
        a=a*a%mod;
    }
    return ans;
}
pair<int,int>a[1005];//用一个pair来定义数组a,first表示分解后的质因数，second表示最小循环节d分解后的质因数的指数 
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        long long p,n,m;
        scanf("%lld%lld%lld",&p,&n,&m);
        if(p==2||p==5)//特判25 
        {
            printf("0\n");
            continue;
        }
        else if(p==3)//特判3 
        {
            printf("%lld\n",n/3*m);
            continue;
        }
        long long x=p-1;//x为最小循环节的长度 
        int minn=p-1;//minn 
        for(int i=2; i*i<=x; i++)
        {
            if(x%i==0)
            {
                if(quickmod(10,i,p)==1)
                    minn=min(minn,i);
                if(quickmod(10,x/i,p)==1)
                    minn=min(1ll*minn,x/i);
            }
        }
        int cnt=0;
        int maxn=0;
        x=minn;
        for(int i=2; i*i<=x; i++)//质因数分解i和d 
        {
            if(x%i==0)
            {
                a[cnt].first=0;//cnt为统计所有质因数的个数 
                a[cnt].second=0;
                a[cnt].first=i;
                while(x%i==0)
                {
                    a[cnt].second++;
                    x=x/i;
                }
                maxn=max(a[cnt].second,maxn);
                cnt++;
            }
        }
        if(x>1)
        {
            a[cnt].first=0;
            a[cnt].second=0;
            a[cnt].first=x;
            a[cnt].second++;
            maxn=max(a[cnt].second,maxn);//maxn为质因数分解循环节中最大的bx 
            cnt++;
        }
        long long ans=0;
        long long g=1;
        for(int j=1; j<=min(1ll*maxn,m); j++)//如果j在[1,maxn]之间时，分别计算相对于每一个j的n/g 
        {
            g=1;
            for(int i=0; i<cnt; i++)
            {
                g=g*quickmod(a[i].first,ceil(1.0*a[i].second/j));
            }
            ans+=n/g;
        }
        if(m>maxn)//如果j>maxn，那么g不再变化，每一个的贡献为n/g*(m-maxn) 
            ans+=n/g*(m-maxn);
        printf("%lld\n",ans);
    }
    return 0;
}


     
 /***********************************************************************************************************************************/
 E
 /***********************************************************************************************************************************/
 F
 /***********************************************************************************************************************************/
 G
 /***********************************************************************************************************************************/
 H Magic Line
 链接：https://ac.nowcoder.com/acm/contest/883/H
来源：牛客网

题意是说在二维平面内有n个点，找出一条线可以平分直线两边的点的个数，
先按照x从小到大排序，接着按照y从小到大排序，选择最中间的两个点，经过这两点之间的线没有办法经过其他的店，所以做到了平分
考虑两种特殊情况
1，这两个点的x坐标是相邻的，这样的话这个连线就在整两个点的上下方找y值，这样的话就是直接穿过了这两个点之间的连线，存在斜率
2.这两个点的x方向的距离大于1，则说明不相邻，这个时候需要在这两点之间求一条垂直于x坐标轴的线，就可以了
#include<iostream>
#include<algorithm>
#define N 100010
using namespace std;
typedef long long ll;
 
struct Node{
    int x,y;
}a[N];
 
int cmp(Node A,Node B)//定义排序函数，x从小到大进行排序，y从大到小进行排序 
{
    if(A.x==B.x)return A.y>B.y;
    return A.x<B.x;
}
 
int main()
{
    ll T; 
    scanf("%lld",&T);
    while(T--){
        ll n;
        scanf("%lld",&n);
        for(int i=0;i<n;i++)
        {
            scanf("%lld%lld",&a[i].x,&a[i].y);
        }
        sort(a,a+n,cmp);
        int x1,x2,y1=999000000,y2=-999000000;//y的定义是在范围之内取得最大数 
        //判断中间的两个点是否相邻 
        if(a[n/2].x>a[n/2-1].x+1)//如果不相邻 
        {
            x1=(a[n/2].x+a[n/2-1].x)/2;//横坐标取两点中点，并且横坐标相等，纵坐标取不同的值，这样的话就是一条垂直于x轴的直线 
            x2=x1;
            y1=1;
            y2=-1;
        }
        else//讨论相邻或者x相等的情况 
        {
        	if(a[n/2].x==a[n/2-1].x)//如果中间两个点的x值相等的话，x1和x2的值就要错开 
			{
	            x1=a[n/2-1].x+1;
	            x2=a[n/2].x-1;				
			 } 
			else//如果不相等花花，他们的距离为1，只需要改变y值就可以了 
			{
	            x1=a[n/2].x;
	            x2=a[n/2-1].x;				
			}

            int y;
            y=(a[n/2-1].y+a[n/2].y);//y定义中间两点的y值之和，因为中点是y值之和除以2，因为除以2之后可能会有小数，所以不除 
            y2=y-y1;//y2+y1=y ，因为画图可证y1+y2=y，即这一条线是过两点连线的中点的 
        }
         
        printf("%d %d %d %d\n",x1,y1,x2,y2);
//      for(int i=0;i<n;i++)
//      printf("%d %d\n",a[i].x,a[i].y);
    }
     
    return 0;
 }
 /***********************************************************************************************************************************/
 I
 /***********************************************************************************************************************************/
 J
